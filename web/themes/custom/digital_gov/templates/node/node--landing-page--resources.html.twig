{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 *
 * @see template_preprocess_node()
 *
 * @ingroup themeable
 */
#}

<main role="main" id="main-content">
  <section class="grid-container-desktop">
    <header class="page-head padding-bottom-0">
      <h1>{{ node.title.value }}</h1>

      {% if content.field_deck %}
        <p>
          {{ content.field_deck|field_value }}
        </p>
      {% endif %}
    </header>

    <div class="dg-resource-topics margin-bottom-8">
      <h2 class="margin-top-0">Browse by topic</h2>
      <div class="dg-resource-topics-grid">
        [placeholder resource topics views]
        {# todo: update topics to have this as an option for it to be listed as #}
        {# NOT-MIGRATED
        {{ template "topics-list" (dict "title" "Design" "data" $design_topics "scope" .) }}
        {{ template "topics-list" (dict "title" "Data & analysis" "data" $data_analysis_topics "scope" .) }}
        {{ template "topics-list" (dict "title" "Operations" "data" $operations_topics "scope" .) }}
        {{ template "topics-list" (dict "title" "Content & communication" "data" $content_communications_topics "scope" .) }}
        {{ template "topics-list" (dict "title" "Technology" "data" $technology_topics "scope" .) }}
        {{ template "topics-list" (dict "title" "Strategic development" "data" $strategic_development_topics "scope" .) }}
        #}

{# ! below is the code from hugo #}
{# <div class="dg-resource-topics-list">
  <h3 class="dg-resource-topics-list__header">
    {{ .title }}
    test data
  </h3>
  <ul class="dg-resource-topics-list__list usa-list usa-list--unstyled">
    {{ range $data }}
      <li class="dg-resource-topics-list__list-item">
        {{ $page := $scope.GetPage (printf "/topics/%s" . ) }}
        <a class="dg-resource-topics-list__link" href="{{ link }}">{{ title }}</a>
      </li>
    {{ end }}
  </ul>
</div> #}

      </div>
    </div>
  </section>
</main>

[ Placeholder  Display a list of topic links and resource category header ]

{# NOT_MIGRATED
@param {string} - title for the header of the resource category topic list
@param {list} - data list of topic strings to display for each link
@param {scope} - scope of current page context
*/}}
{{ define "topics-list" }}
  {{ $title := .title }}
  {{ $data := .data }}
  {{ $scope := .scope }}
<div class="dg-resource-topics-list">
  <h3 class="dg-resource-topics-list__header">
    {{ .title }}
  </h3>
  <ul class="dg-resource-topics-list__list usa-list usa-list--unstyled">
    {{ range $data }}
    <li class="dg-resource-topics-list__list-item">
      {{ $page := $scope.GetPage (printf "/topics/%s" . ) }}
      <a class="dg-resource-topics-list__link" href="{{ $page.Permalink }}"
      >{{ $page.Title }}</a
      >
    </li>
    {{ end }}
  </ul>
</div>
#}
