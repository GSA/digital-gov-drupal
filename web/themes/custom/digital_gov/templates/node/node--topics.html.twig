{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 *
 * @see template_preprocess_node()
 *
 * @ingroup themeable
 */
#}

<main role="main" id="main-content">
  <div class="grid-container-desktop">
    {{ drupal_entity('block', 'digital_gov_breadcrumbs') }}
  </div>

  {#  Default & Collection Header #}
  <header class="grid-container-desktop">
    <h1
      class="{{ node.field_legislation.0 ? 'dg-topic__header-title--collection' : 'dg-topic__header-title' }}"
    >
      {{ node.title.value }}
    </h1>

    {# Deck #}
    {% if content.field_deck %}
      <p class="dg-topic__deck margin-0">
        {{ content.field_deck | field_value }}</div>
      </p>
    {% endif %}
  </header>

  {# Collection — Summary & Legislation #}
  {% if node.field_summary or node.field_legislation %}
    <div class="grid-container-desktop margin-top-2">
      <div class="grid-row desktop:grid-gap-4">
        <div class="desktop:grid-col margin-bottom-4">
          {{ content.field_summary }}
        </div>
        <div class="desktop:grid-col">
          {% if node.field_legislation.list %}
            {{ include('@digital_gov/partials/card-legislation.html.twig', {
              'title': node.field_legislation.0.title,
              'url': node.field_legislation.0.uri
            }, with_context = false) }}
          {% endif %}
        </div>
      </div>
    </div>
  {% endif %}

  {# Collection — Featured Resources and Communities #}
  {% if content.field_featured_resources or content.field_featured_communities %}

      <div class="dg-topic__featured grid-container-desktop">
        {{ content.field_featured_resources }}

        [placeholder featured communities]
        {{ content.field_featured_communities }}

        {# range .Params.featured_communities #}
        {# $community_page := (dict "link" (printf "communities/%s" .)) #}
        {# NOT-MIGRATED #}
        {# partial "core/featured-resource.html" (dict "Site" $.Site "resource_data" $community_page) #}
        {# end #}
      </div>

  {% endif %}

  {# Collection Featured Links #}
  {% if content.field_featured_links %}
      <div class="grid-container-desktop margin-y-6">
        {% if Params.featured_links.title %}
          <h2>{{ Params.featured_links.title }}</h2>
        {% else %}
          <h2>What you need to know</h2>
        {% endif %}

        {{ content.field_featured_links }}

        {# NOT-MIGRATED #}
        {# $featured_links := .Params.featured_links.resources #}
        {# $footer := ( dict "title" .Params.featured_links.footer.title "href" .Params.featured_links.footer.href ) #}
        {# $collection_settings := ( dict "variant" "custom" "limit" 10 "list_header" 3 "footer" $footer ) #}
        {# partial "partials/core/collection/collection.html" (dict "collection_data" $featured_links "settings" $collection_settings) #}
      </div>
  {% else %}
    {# Only show these sections when on page 1, otherwise hide to show only More News and Events #}
    {% if is_first_page %}
      {# Default - Related resources, services, and communities #}
      <div class="grid-container-desktop usa-section">
        {# NOT-MIGRATED #}
        {# $resource_settings := ( dict "header_title" (print "Resources on " .Title) "header_size" 2 "variant" "media" "list_header" 3) #}
        {# partial "partials/core/collection/collection.html" (dict "collection_data" $resources "settings" $resource_settings ) #}

        {# NOT-MIGRATED #}
        {# $services_settings := ( dict "header_title" "Tools and Services" "header_size" 2 "variant" "media" "list_header" 3) #}
        {# partial "partials/core/collection/collection.html" (dict "collection_data" $services "settings" $services_settings) #}

        {# NOT-MIGRATED #}
        {# $community_settings := ( dict "header_title" "Join a Community of Practice" "header_size" 2 "variant" "media" "list_header" 3) #}
        {# partial "partials/core/collection/collection.html" (dict "collection_data" $communities "settings" $community_settings) #}
      </div>
    {% endif %}
  {% endif %}

  {# Topic Collection will always have a legislation card, use this as flag to display first 5 events & news #}
  {% if Params.legislation %}
    {# Only show these sections when on page 1, otherwise hide to show only More News and Events #}
    {% if is_first_page %}
      <section class="dg-stream usa-section">
        <div class="grid-container-desktop">
          {# Display first 5 events #}
          {# $featured_events_stream := first 5 $events #}
          {% if featured_events_stream %}
            <h2>{{ node.title.value }} events</h2>

            [placeholder featured events]
            {# NOT-MIGRATED #}
            {# range $featured_events_stream #}
            {# .Render "card-event" #}
            {# end #}
          {% else %}
            <h3>No Events to Display</h3>
          {% endif %}
        </div>

        <div class="grid-container-desktop">
          {# Display first 5 news posts #}
          {# NOT-MIGRATED #}
          {# $featured_posts_stream := first 5 $posts.ByDate.Reverse #}

          [placeholder featured posts]
          {% if featured_posts_stream %}
            <h2>{{ node.title.value }} news</h2>

            {# range $featured_posts_stream #}
            {# NOT-MIGRATED #}
            {# .Render "card-news" #}
          {% else %}
            <h3>No News to Display</h3>
          {% endif %}
        </div>
      </section>
    {% endif %}
  {% else %}
    <section class="usa-section">
      <div class="grid-container grid-container-desktop">
        {# Display events and news in one stream with pagination for topic default #}
        [placeholder featured events and news]
        {% if stream_paginated %}
          <h2>
            News and Events on
            {{ node.title.value }}
          </h2>
          <p>{{ stream_count }} posts</p>

          {# NOT-MIGRATED
          {{ range stream_paginated }}
            {% if eq .Type "events" %}
            {{ .Render "card-event" }}
            {% endif %}

            {% if eq .Type "news" %}
            {{ .Render "card-news" }}
            {% endif %}
          #}
          {# end #}
        {% endif %}
        {# NOT-MIGRATED #}
        {# partial "core/pagination.html" . #}
      </div>
    </section>
  {% endif %}

  {% if node.field_legislation.0 %}
    {# Display remaining resources, events and news for topic collection #}
    {% if is_first_page %}
      <section class="grid-container-desktop usa-section">
        [placeholder remaining resources]
        {# Only show these sections when on page 1, otherwise hide to show only More News and Events #}
        {# $resource_settings := ( dict "header_title" (printf "Resources on %s" .Title) "header_size" 2 "variant" "media" "list_header" 3) #}
        {# NOT-MIGRATED #}
        {# partial "partials/core/collection/collection.html" (dict "collection_data" $resources "settings" $resource_settings ) #}

        {# $services_settings := ( dict "header_title" "Tools and Services" "header_size" 2 "variant" "media" "list_header" 3) #}
        {# NOT-MIGRATED #}
        {# partial "partials/core/collection/collection.html" (dict "collection_data" $services "settings" $services_settings) #}
      </section>
    {% endif %}

    [placeholder more news and events]
    {% if stream_paginated %}
      <div class="usa-section usa-section--light">
        <div class="grid-container grid-container-desktop">
          <h2 id="dg-stream-pagination-header">
            More News and Events on
            {{ node.title.value }}
          </h2>
          <p>{{ stream_count }} posts</p>

          {# range $stream_paginated #}
          {% if Type == "events" %}
            {# NOT-MIGRATED #}
            {# .Render "card-event" #}
          {% endif %}

          {% if Type == "news" %}
            {# NOT-MIGRATED #}
            {# .Render "card-news" #}
          {% endif %}
          {# end #}
          {# NOT-MIGRATED #}
          {# partial "core/pagination.html" . #}
        </div>
      </div>
    {% endif %}
  {% endif %}

</main>
