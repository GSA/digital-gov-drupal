<?php

/**
 * @file
 * Functions to support theming in the Digital.gov theme.
 */

declare(strict_types=1);

use Drupal\Component\Serialization\Yaml;
use Drupal\Component\Utility\Html;
use Drupal\convert_text\ConvertText;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Link;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * @file
 * Functions to support theming in the Digital.gov theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function digital_gov_preprocess_html(array &$variables): void {
  $is_front = \Drupal::service('path.matcher')->isFrontPage();
  $variables['theme_path'] = \Drupal::theme()->getActiveTheme()->getPath();
  $variables['theme_path_absolute'] = Url::fromUri('base://' . $variables['theme_path'], ['absolute' => TRUE])->toString();

  // @todo Authors landing page? authors + term.
  if ($is_front) {
    $variables['attributes']['class'][] = 'home';
    $variables['attributes']['class'][] = 'page';
  }
  elseif ($node = \Drupal::routeMatch()->getParameter('node')) {
    $variables['attributes']['class'][] = dg_get_specific_body_class($node);
    $variables['attributes']['class'][] = dg_get_broad_body_class($node);
  }
}

/**
 * Helper to lookup node type to body class.
 *
 * For cases where the Drupal content type doesn't match the Hugo content type.
 */
function dg_get_specific_body_class(NodeInterface $node): string {
  if ($node->getType() === 'landing_page') {
    // The landing page type value is the css class used by hugo.
    return Html::getClass($node->get('field_landing_page_type')->getString());
  }

  return match ($node->getType()) {
    'event' => 'events',
    'community' => 'communities',
    'guide_landing' => 'landings',
    default => Html::getClass($node->getType()),
  };
}

/**
 * Helper to lookup node type to broad body class.
 */
function dg_get_broad_body_class(NodeInterface $node): string {

  if ($node->getType() === 'guides') {

    if (!$node->get('field_guide_nav_ref')->referencedEntities()) {
      return '';
    }
    // Need to check if this is the Overview page.
    if ($navNode = $node->get('field_guide_nav_ref')->referencedEntities()[0]) {
      // This field points at a paragraph entity.
      if ($ref = $navNode->get('field_guide_navigation')->referencedEntities()[0]) {
        // Is the first node in the guide navigation this node?
        if ($ref->get('field_guide_link')->referencedEntities()) {
          $overview = $ref->get('field_guide_link')->referencedEntities()[0];
          if ($overview->id() === $node->id()) {
            return 'section';
          }
        }
      }
    }

  }

  return match ($node->getType()) {
    'landing_page',
    'guide_landing' => 'section',
    'authors',
    'topics' => 'term',
    // All other nodes are pages.
    default => 'page',
  };
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function digital_gov_preprocess_page(array &$variables): void {

}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function digital_gov_preprocess_node(array &$variables): void {
  $variables['attributes']['class'] = 'grid-container-desktop';
  $created = DrupalDateTime::createFromTimestamp($variables['node']->getCreatedTime());
  $variables['created'] = $created->format('M j, Y');

  // Check if current node page is designated an error page
  // And set a variable for templates.
  $system_errors = [
    404 => Drupal::config('system.site')->get('page.404'),
    403 => Drupal::config('system.site')->get('page.403'),
  ];
  foreach ($system_errors as $system_error) {
    if ($system_error == '/node/' . $variables['node']->id()) {
      $variables['error_page'] = TRUE;
    }
  }

  $site_config = \Drupal::config('system.site');
  $variables['site_name'] = $site_config->get('name');

  switch ($variables['node']->bundle()) {
    case 'news':
      // $before_date = new DrupalDateTime('5 years ago');
      // $variables['show_archive_warning'] = $created->getPhpDateTime() <=
      // $before_date->getPhpDateTime();
      // Disable this archive warning, see DIGITAL-336.
      $variables['show_archive_warning'] = FALSE;
      break;

    case 'event':
      $variables['is_future_event'] = $variables['node']->getCreatedTime() > \Drupal::time()->getRequestTime();
      break;

    case 'guides':
      digital_gov_preprocess_node_guides($variables);
      break;

    case 'guide_landing':
      digital_gov_preprocess_node_guide_landing($variables);
      break;

    case 'authors':
      if ($variables['view_mode'] !== 'image') {
        break;
      }
      $profile_source = $variables['node']->get('field_profile_source')->getString();
      $github = $variables['node']->get('field_github')->getString();
      if (empty($profile_source) && $github) {
        $profile_source = 'github';
      }

      switch ($profile_source) {
        case 'github':
          // Author has selected GitHub and specified a GitHub user ID.
          $variables['icon_path'] = sprintf('https://github.com/%s.png?size=50', $github);
          $variables['icon_path_internal'] = FALSE;
          break;

        case 'digit-light':
        case 'digit-dark':
        case 'digit-pride':
          $variables['icon_path'] = sprintf('static/digitalgov/img/%s.png', $profile_source);
          $variables['icon_path_internal'] = TRUE;
          break;

        default:
          // No source selected OR they picked GitHub without a GitHub ID
          // choose between light and dark based on length of the slug.
          $variables['icon_path'] = sprintf(
            'static/digitalgov/img/digit-%s.png',
            strlen($variables['node']->get('field_slug')->getString() ?: $variables['node']->label()) % 2 ? 'dark' : 'light'
          );
          $variables['icon_path_internal'] = TRUE;
          break;
      }
      break;
  }

  $request = \Drupal::service('request_stack')->getCurrentRequest();
  $page_param = $request->query->get('page');

  // Ensure it's a number and sanitize it.
  $variables['page_param'] = (is_numeric($page_param)) ? Html::escape($page_param) : NULL;
  $variables['is_first_page'] = $variables['page_param'] === '0' || $variables['page_param'] === NULL;
}

/**
 * Preprocess function for guide nodes.
 */
function digital_gov_preprocess_node_guides(&$variables): void {
  $guide = $variables['node'];
  // Set defaults.
  $variables['show_next_previous'] = FALSE;
  $variables['show_in_page_nav'] = FALSE;
  $variables['is_guide_overview'] = FALSE;
  $variables['show_summary_box'] = $guide->get('field_summary_box')[0]?->get('value')->getCastedValue();

  if ($nav_node = $guide->get('field_guide_nav_ref')->first()?->get('entity')->getTarget()?->getValue()) {
    $links = digital_gov_get_guidenav_links($nav_node, $variables['url']);
    $variables = array_merge($variables, $links);

    if ($overview_image = $nav_node->get('field_overview_image')->first()?->get('entity')->getTarget()->getValue()) {
      $media = $overview_image->get('field_media_image')->first();
      $variables['guide_overview_image'] = $media;

      if ($credit = $overview_image->get('field_credit')->first()) {
        $variables['guide_overview_credit'] = $credit->view();
      }

      if ($caption = $overview_image->get('field_caption')->first()) {
        $variables['guide_overview_caption'] = $caption->view();
      }
    }
    $variables['show_next_previous'] = $nav_node->field_show_next_previous?->value === "1";
    $variables['show_in_page_nav'] = $nav_node->field_show_in_page_nav?->value === "1";
    if ($links['guide_nav']) {
      $variables['is_guide_overview'] = ($variables['url'] === $links['guide_nav'][0]['link']?->getUrl()->toString());
    }
  }
}

/**
 * Preprocess function for guide landing nodes.
 */
function digital_gov_preprocess_node_guide_landing(&$variables): void {
  if ($hero_image = $variables['node']->get('field_primary_image')->first()?->get('entity')->getTarget()->getValue()) {
    $media = $hero_image->get('field_media_image')->first();
    $variables['hero_image'] = $media;

    if ($credit = $hero_image->get('field_credit')->first()) {
      $variables['hero_credit'] = $credit->view();
    }

    if ($caption = $hero_image->get('field_caption')->first()) {
      $variables['hero_caption'] = $caption->view();
    }
  }
}

/**
 * Builds an array we can add to $variables with guide navigation info.
 */
function digital_gov_get_guidenav_links(Node $node, string $current): array {
  // Anonymous helper for getting node links.
  $makeLink = function (Node $page, ?string $override = NULL): Link {
    $label = $page->label();

    // Allow caller to specify the title to use, unless it's been set in the CMS
    // Mainly to label the starting page as the Overview page.
    if ($node_nav_title = $page->get('field_guide_nav_title')->getString()) {
      $label = $node_nav_title;
    }
    elseif ($override) {
      $label = $override;
    }

    return $page->toLink($label);
  };

  // The guide_nav is an array that holds items with the following keys
  // - 'link': A Link object the main link used the menu bar
  // - 'subnav': an array of Link objects of links if the sidenav is shown.
  $links['guide_nav'] = [];

  if ($kicker_link = $node->get('field_kicker_link')?->first()) {
    $links['guide_kicker_title'] = $kicker_link->getValue()['title'];
    $links['guide_kicker_url'] = Url::fromUri($kicker_link->getValue()['uri']);
  }

  if ($node->field_guide_navigation) {
    // Track the count separately in case the first item is not published.
    $count = 0;
    // Generate the two-levels of nav links for this guide.
    foreach ($node->field_guide_navigation as $ref) {
      // This field points at a paragraph entity.
      $para = Paragraph::load($ref->target_revision_id);

      if ($para->field_guide_link->target_id) {
        $guidePage = $para->get('field_guide_link')->referencedEntities()[0];
        if (!$guidePage || !$guidePage->isPublished()) {
          continue;
        }

        if ($count === 0) {
          $links['guide_overview_node'] = $guidePage;
        }
        // Add the link to the navigation.
        $link = $makeLink($guidePage, $count === 0 ? 'Overview' : NULL);
        $item['link'] = $link;

        $count++;

        if ($para->field_guide_subnav) {
          $subNavNodes = $para->get('field_guide_subnav')->referencedEntities();
          $subNavNodes = array_filter($subNavNodes, fn(Node $node) => $node->isPublished());
          if ($subNavNodes) {
            $item['subnav'] = array_map($makeLink, $subNavNodes);
            // If the current page is in the subnav, mark the parent as current.
            $current_in_subnav = array_filter($item['subnav'], function (Link $subItem) use ($current) {
              return $subItem->getUrl()->toString() === $current;
            });
            if ($current_in_subnav) {
              // We haven't added our item to the guidenav, add 1 to the index.
              $links['guide_current_index'] = $links['guide_nav'] ? array_key_last($links['guide_nav']) + 1 : 0;
            }
          }
        }
        $links['guide_nav'][] = $item;
        if ($item['link']->getUrl()->toString() === $current) {
          // Mark which top-level page is open.
          $links['guide_current_index'] = array_key_last($links['guide_nav']);
        }
      }
    }
  }

  // Here, figure out the next/previous links.
  // We need a flat list of all the URLs in the guide nav keyed by URL.
  $allTheUrls = [];

  array_walk_recursive(
    $links['guide_nav'],
    function ($link) use (&$allTheUrls) {
      $allTheUrls[$link->getUrl()->toString()] = $link;
    }
  );

  // $keyMap tells us what numeric slot each URL is found in.
  $keyMap = array_keys($allTheUrls);
  if ($allTheUrls && FALSE !== ($currentKey = array_search($current, $keyMap))) {
    if (isset($keyMap[$currentKey - 1])) {
      $prevKey = $keyMap[$currentKey - 1];
      $links['guide_prev'] = $allTheUrls[$prevKey];
    }

    if (isset($keyMap[$currentKey + 1])) {
      $nextKey = $keyMap[$currentKey + 1];
      $links['guide_next'] = $allTheUrls[$nextKey];
    }
  }

  return $links;
}

/**
 * Implements hook_theme().
 */
function digital_gov_theme(): array {
  return [
    'author_image' => [
      'variables' => [
        'author' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function digital_gov_preprocess_block__site_wrapper_header(&$variables) {
  $variables['theme_path'] = \Drupal::theme()->getActiveTheme()->getPath();
  $variables['logo_url'] = theme_get_setting('logo.url');
  $site_config = \Drupal::config('system.site');
  $variables['site_name'] = $site_config->get('name');
  $variables['site_slogan'] = $site_config->get('slogan');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function digital_gov_preprocess_block__site_wrapper_usa_banner(&$variables) {
  $variables['theme_path'] = \Drupal::theme()->getActiveTheme()->getPath();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function digital_gov_preprocess_block__site_wrapper_notice_bar(&$variables) {
  $site_config = \Drupal::config('environment');
  $variables['env_non_prod_remote'] = $site_config->get('env_non_prod_remote');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function digital_gov_preprocess_block__site_wrapper_footer(&$variables) {
  $variables['theme_path'] = \Drupal::theme()->getActiveTheme()->getPath();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function digital_gov_preprocess_menu(&$variables, $hook) {
  $menu_attributes = NULL;
  $menu_item_attributes = NULL;
  switch ($variables['menu_name']) {
    case 'footer':
    case 'footer-about':
    case 'footer-grow':
      $menu_attributes = new Attribute();
      $menu_attributes->addClass([
        'usa-list',
        'usa-list--unstyled',
      ]);
      $menu_item_attributes = new Attribute();
      $menu_item_attributes->addClass([
        'usa-footer__secondary-link',
      ]);
      break;

    case 'main':
      $menu_attributes = new Attribute();
      $menu_attributes->addClass([
        'usa-nav__primary',
        'usa-accordion',
      ]);
      $menu_item_attributes = new Attribute();
      $menu_item_attributes->addClass([
        'usa-nav__primary-item',
      ]);
      break;

  }
  if ($menu_attributes) {
    $variables['attributes'] = $menu_attributes;
  }
  if ($menu_item_attributes && !empty($variables['items'])) {
    foreach ($variables['items'] as &$item) {
      $item['attributes'] = $menu_item_attributes;
    }
  }
}

/**
 * Implements hook_preprocess_theme_suggestions_node_alter().
 */
function digital_gov_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  $node = $variables["elements"]["#node"];

  switch ($node->getType()) {
    case 'landing_page':
      if ($landing_type = $node->field_landing_page_type->value) {
        $suggestions[] = 'node__landing_page__' . $landing_type;
        $suggestions[] = 'node__landing_page__' . $landing_type . '__' . $variables["elements"]["#view_mode"];
      }
      break;
  }
}

/**
 * Implements hook_theme_suggestions_user_alter().
 */
function digital_gov_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  if (!isset($variables['element']['#name'])) {
    return $suggestions;
  }
  // A list of view names in which to exclude the container markup.
  $exclude_views = [
    'communities_for_topic',
    'guide_cards',
    'resource_topics_list',
    'resources_for_topic',
  ];

  if (in_array($variables['element']['#name'], $exclude_views)) {
    $suggestions[] = 'container__no_wrapper';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function digital_gov_preprocess_node__landing_page__job_board(&$variables, $hook) {
  $filtered_array = [];
  $entity_type_manager = \Drupal::entityTypeManager();
  $config_pages = $entity_type_manager->getStorage('config_pages')->load('job_board');
  $yml_string = $config_pages->get('field_job_board_yml_contents')->getString();
  try {
    $yml_array = Yaml::decode($yml_string);
  }
  catch (\Exception $exception) {
    $yml_array = [];
    \Drupal::logger('job_board')->emergency('The valued stored for job board at /admin/content/job-board is not valid YAML. ' . $exception->getMessage());
  }
  if (!empty($yml_array)) {
    foreach ($yml_array as $item) {
      $close_date = date('Y-m-d', $item['close_date']);
      $today = date('Y-m-d');
      if ($close_date >= $today) {
        $item['open_date'] = date('F j, Y', $item['open_date']);
        $item['close_date'] = date('F j, Y', $item['close_date']);
        // These fields may have markdown still.
        $item['title'] = ConvertText::htmlText($item['title']);
        $item['department'] = ConvertText::htmlText($item['department']);
        $item['description'] = ConvertText::htmlText($item['description']);

        $filtered_array[] = $item;
      }
    }
  }
  $variables['job_board'] = $filtered_array;
}
