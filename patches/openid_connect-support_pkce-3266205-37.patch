diff --git a/config/schema/openid_connect.schema.yml b/config/schema/openid_connect.schema.yml
index 4b93e0b4f2e5e86d6ed6c4c0abdd12412fc48a44..69889ca984d965d4db2c6c8ef2ccbdbaae2adf67 100644
--- a/config/schema/openid_connect.schema.yml
+++ b/config/schema/openid_connect.schema.yml
@@ -65,6 +65,9 @@ openid_connect.client.plugin.*:
     iss_allowed_domains:
       type: string
       label: 'Domains that are allowed to initiate SSO using ISS'
+    pkce_challenge_transformation:
+      type: string
+      label: 'Proof of Key Code Exchange (PKCE) challenge transformation'
 
 openid_connect.client.plugin.facebook:
   type: mapping
diff --git a/openid_connect.install b/openid_connect.install
index b7a1efd305c84fbee2efb9d0d2f0bb053aedb9dc..d1e98b5eb03c0bda5a68b9c4a6132b9d490e8610 100644
--- a/openid_connect.install
+++ b/openid_connect.install
@@ -334,3 +334,21 @@ function openid_connect_update_8210() {
 function openid_connect_update_30001() {
   \Drupal::service('module_installer')->install(['file']);
 }
+
+/**
+ * Set the PKCE configuration for each client.
+ */
+function openid_connect_update_8300() {
+  /** @var Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $clients */
+  $clients = \Drupal::entityTypeManager()->getStorage('openid_connect_client')->loadMultiple();
+
+  foreach ($clients as $client) {
+    $config = $client->getPlugin()->getConfiguration();
+    if (!isset($config['pkce_challenge_transformation'])) {
+      $client->getPlugin()->setConfiguration([
+        'pkce_challenge_transformation' => 'off'
+      ]);
+      $client->save();
+    }
+  }
+}
diff --git a/src/OpenIDConnectSession.php b/src/OpenIDConnectSession.php
index ea79bf1df4e8a4edf5590c3b8cf96f0834eea802..4fef783d14d7c5492c6384ac7f12fe6114575b21 100644
--- a/src/OpenIDConnectSession.php
+++ b/src/OpenIDConnectSession.php
@@ -207,4 +207,22 @@ class OpenIDConnectSession implements OpenIDConnectSessionInterface {
     $this->session->set('openid_connect_state', $token);
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function retrieveCodeVerifier(bool $clear = TRUE) : ?string {
+    $ret = $this->session->get('openid_connect_code_verifier');
+    if ($clear) {
+      $this->session->remove('openid_connect_code_verifier');
+    }
+    return $ret;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function saveCodeVerifier(string $value) {
+    $this->session->set('openid_connect_code_verifier', $value);
+  }
+
 }
diff --git a/src/OpenIDConnectSessionInterface.php b/src/OpenIDConnectSessionInterface.php
index 2c42dbd4439d4ad544f825c47db5e8cc7d11eb58..5bdb27588b8121c0ffd70ed58b14cae3b5bdbc1b 100644
--- a/src/OpenIDConnectSessionInterface.php
+++ b/src/OpenIDConnectSessionInterface.php
@@ -120,4 +120,23 @@ interface OpenIDConnectSessionInterface extends ContainerInjectionInterface {
    */
   public function saveStateToken(string $token);
 
+  /**
+   * Get the code_verifier value from session.
+   *
+   * @param bool $clear
+   *   The value is cleared from the session, unless this is set to FALSE.
+   *
+   * @return string|null
+   *   The raw code_verifier value.
+   */
+  public function retrieveCodeVerifier(bool $clear = TRUE): ?string;
+
+  /**
+   * Save the code_verifier value in the session.
+   *
+   * @param string $value
+   *   The raw code_verifier value.
+   */
+  public function saveCodeVerifier(string $value);
+
 }
diff --git a/src/Plugin/OpenIDConnectClient/OpenIDConnectGenericClient.php b/src/Plugin/OpenIDConnectClient/OpenIDConnectGenericClient.php
index 268c5ed890adab05bebd8289c24507b963fd1a6c..187e929c763657c67890bde139d320a40056d0f0 100644
--- a/src/Plugin/OpenIDConnectClient/OpenIDConnectGenericClient.php
+++ b/src/Plugin/OpenIDConnectClient/OpenIDConnectGenericClient.php
@@ -18,6 +18,11 @@ use Drupal\openid_connect\Plugin\OpenIDConnectClientBase;
  */
 class OpenIDConnectGenericClient extends OpenIDConnectClientBase {
 
+  /**
+   * {@inheritdoc}
+   */
+  protected $canUsePkce = TRUE;
+
   /**
    * {@inheritdoc}
    */
diff --git a/src/Plugin/OpenIDConnectClient/OpenIDConnectGoogleClient.php b/src/Plugin/OpenIDConnectClient/OpenIDConnectGoogleClient.php
index 6cc933c392853186333ec6d7fe59b25efcb92f39..6a5e2a1f72b1ca0f6586a7d9ca690b3b890f46b8 100644
--- a/src/Plugin/OpenIDConnectClient/OpenIDConnectGoogleClient.php
+++ b/src/Plugin/OpenIDConnectClient/OpenIDConnectGoogleClient.php
@@ -17,6 +17,11 @@ use Drupal\openid_connect\Plugin\OpenIDConnectClientBase;
  */
 class OpenIDConnectGoogleClient extends OpenIDConnectClientBase {
 
+  /**
+   * {@inheritdoc}
+   */
+  protected $canUsePkce = TRUE;
+
   /**
    * {@inheritdoc}
    */
diff --git a/src/Plugin/OpenIDConnectClient/OpenIDConnectOktaClient.php b/src/Plugin/OpenIDConnectClient/OpenIDConnectOktaClient.php
index 68ad0bbb48732afe4f70176112ceb12ca4eddcda..018e9b529fa6416bc09712481af1ca65f59347b0 100644
--- a/src/Plugin/OpenIDConnectClient/OpenIDConnectOktaClient.php
+++ b/src/Plugin/OpenIDConnectClient/OpenIDConnectOktaClient.php
@@ -17,6 +17,11 @@ use Drupal\openid_connect\Plugin\OpenIDConnectClientBase;
  */
 class OpenIDConnectOktaClient extends OpenIDConnectClientBase {
 
+  /**
+   * {@inheritdoc}
+   */
+  protected $canUsePkce = TRUE;
+
   /**
    * {@inheritdoc}
    */
diff --git a/src/Plugin/OpenIDConnectClientBase.php b/src/Plugin/OpenIDConnectClientBase.php
index 9980f2b7e7601cea3362844ba68b5fe77b35ddca..118faf2199f7f35796abd289257dc68eb63ed70b 100644
--- a/src/Plugin/OpenIDConnectClientBase.php
+++ b/src/Plugin/OpenIDConnectClientBase.php
@@ -17,6 +17,7 @@ use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Url;
 use Drupal\openid_connect\OpenIDConnectAutoDiscover;
+use Drupal\openid_connect\OpenIDConnectSessionInterface;
 use Drupal\openid_connect\OpenIDConnectStateTokenInterface;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ -87,6 +88,13 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
    */
   protected $autoDiscover;
 
+  /**
+   * The OpenID Connect session service.
+   *
+   * @var \Drupal\openid_connect\OpenIDConnectSessionInterface
+   */
+  protected $session;
+
   /**
    * The parent entity identifier.
    *
@@ -94,6 +102,16 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
    */
   protected $parentEntityId;
 
+  /**
+   * If the client can use PKCE in the authorization flow.
+   *
+   * Defaults to false, but individual clients can override and choose to
+   * enable the feature.
+   *
+   * @var bool
+   */
+  protected $canUsePkce = FALSE;
+
   /**
    * The constructor.
    *
@@ -119,8 +137,10 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
    *   The OpenID state token service.
    * @param \Drupal\openid_connect\OpenIDConnectAutoDiscover $auto_discover
    *   The OpenID well-known discovery service.
+   * @param \Drupal\openid_connect\OpenIDConnectSessionInterface $session
+   *   The OpenID Connect session service.
    */
-  public function __construct(array $configuration, string $plugin_id, $plugin_definition, RequestStack $request_stack, ClientInterface $http_client, LoggerChannelFactoryInterface $logger_factory, TimeInterface $datetime_time, KillSwitch $page_cache_kill_switch, LanguageManagerInterface $language_manager, OpenIDConnectStateTokenInterface $state_token, OpenIDConnectAutoDiscover $auto_discover) {
+  public function __construct(array $configuration, string $plugin_id, $plugin_definition, RequestStack $request_stack, ClientInterface $http_client, LoggerChannelFactoryInterface $logger_factory, TimeInterface $datetime_time, KillSwitch $page_cache_kill_switch, LanguageManagerInterface $language_manager, OpenIDConnectStateTokenInterface $state_token, OpenIDConnectAutoDiscover $auto_discover, OpenIDConnectSessionInterface $session) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
 
     $this->requestStack = $request_stack;
@@ -131,6 +151,7 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
     $this->languageManager = $language_manager;
     $this->stateToken = $state_token;
     $this->autoDiscover = $auto_discover;
+    $this->session = $session;
     $this->parentEntityId = '';
     $this->setConfiguration($configuration);
   }
@@ -150,7 +171,8 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
       $container->get('page_cache_kill_switch'),
       $container->get('language_manager'),
       $container->get('openid_connect.state_token'),
-      $container->get('openid_connect.autodiscover')
+      $container->get('openid_connect.autodiscover'),
+      $container->get('openid_connect.session')
     );
   }
 
@@ -199,6 +221,7 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
       'client_id' => '',
       'client_secret' => '',
       'iss_allowed_domains' => '',
+      'pkce_challenge_transformation' => 'off',
     ];
   }
 
@@ -245,6 +268,20 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
       '#type' => 'textarea',
       '#default_value' => $this->configuration['iss_allowed_domains'],
     ];
+    if ($this->canUsePkce) {
+      $form['pkce_challenge_transformation'] = [
+        '#title' => $this->t('PKCE mode'),
+        '#type' => 'select',
+        '#options' => [
+          'S256' => $this->t('S256 (SHA-256)'),
+          'plain' => $this->t('Plain'),
+          'off' => $this->t('Off'),
+        ],
+        '#description' => $this->t('This client supports PKCE which is an extension to the Authorization Code flow to prevent CSRF and authorization code injection attacks. Please choose the transformation applied to the code challenge. S256 is <strong>highly recommended</strong> unless there is a specific reason for using "plain". Choose "Off" if you do not want to use PKCE.'),
+        '#default_value' => $this->configuration['pkce_challenge_transformation'],
+      ];
+    }
+
     return $form;
   }
 
@@ -307,7 +344,7 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
    *   Array with URL options.
    */
   protected function getUrlOptions(string $scope, GeneratedUrl $redirect_uri): array {
-    return [
+    $options = [
       'query' => [
         'client_id' => $this->configuration['client_id'],
         'response_type' => 'code',
@@ -316,13 +353,38 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
         'state' => $this->stateToken->generateToken(),
       ],
     ];
+
+    if ($this->usesPkce()) {
+      $pkce_transformation = $this->getConfiguration()['pkce_challenge_transformation'];
+      $options['query']['code_challenge_method'] = $pkce_transformation;
+      // Prefer sodium_bin2hex if available because it runs in constant-time.
+      $code_verifier = function_exists('sodium_bin2hex') ?
+        sodium_bin2hex(random_bytes(32)) :
+        bin2hex(random_bytes(32));
+
+      // Save the verifier to session because the process involves redirects
+      // and this value needs to be used later in ::getTokenRequestOptions.
+      $this->session->saveCodeVerifier($code_verifier);
+
+      // Optimal (and default) path is S256 transform which is SHA-256 hashed.
+      if ($pkce_transformation === 'S256') {
+        $hash = hash('sha256', $code_verifier, TRUE);
+        $options['query']['code_challenge'] = rtrim(strtr(base64_encode($hash), '+/', '-_'), '=');
+      }
+      // The "plain" option implies no transform at all.
+      else {
+        $options['query']['code_challenge'] = $code_verifier;
+      }
+    }
+
+    return $options;
   }
 
   /**
    * Helper function for request options.
    *
    * @param string $authorization_code
-   *   Authorization code received as a result of the the authorization request.
+   *   Authorization code received as a result of the authorization request.
    * @param string $redirect_uri
    *   URI to redirect for authorization.
    *
@@ -330,7 +392,7 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
    *   Array with request options.
    */
   protected function getRequestOptions(string $authorization_code, string $redirect_uri): array {
-    return [
+    $options = [
       'form_params' => [
         'code' => $authorization_code,
         'client_id' => $this->configuration['client_id'],
@@ -342,6 +404,12 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
         'Accept' => 'application/json',
       ],
     ];
+
+    if ($this->usesPkce()) {
+      $options['form_params']['code_verifier'] = $this->session->retrieveCodeVerifier();
+    }
+
+    return $options;
   }
 
   /**
@@ -431,6 +499,16 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
     return !empty($this->getEndpoints()['userinfo']);
   }
 
+  /**
+   * Check if PKCE is allowed and configured.
+   *
+   * @return bool
+   *   Should PKCE be used?
+   */
+  protected function usesPkce() {
+    return $this->canUsePkce && $this->getConfiguration()['pkce_challenge_transformation'] !== 'off';
+  }
+
   /**
    * Returns the redirect URL.
    *
diff --git a/src/Plugin/OpenIDConnectClientInterface.php b/src/Plugin/OpenIDConnectClientInterface.php
index 5790949195dd6fc6e1f0cea66f28ef91ef76fe6b..695faca483cd22529272893f217b3a0b2076082b 100644
--- a/src/Plugin/OpenIDConnectClientInterface.php
+++ b/src/Plugin/OpenIDConnectClientInterface.php
@@ -66,7 +66,7 @@ interface OpenIDConnectClientInterface extends ConfigurableInterface, DependentP
    * information.
    *
    * @param string $authorization_code
-   *   Authorization code received as a result of the the authorization request.
+   *   Authorization code received as a result of the authorization request.
    *
    * @return array|null
    *   An associative array containing:
